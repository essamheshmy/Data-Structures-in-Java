A stack is a linear data structure that follows the LIFO (Last In, First Out) principle. Imagine a stack of plates; the last plate you put on is the first one you take off.

How Does it Work?
Push: Adds an element to the top of the stack.
Pop: Removes and returns the top element of the stack.
Peek: Returns the top element without removing it.  
isEmpty: Checks if the stack is empty.
size: Returns the number of elements in the stack.  
Java Implementation
Java provides a Stack class in the java.util package. It's based on the Vector class, but it's specifically designed for stack operations.

Example
Java
import java.util.Stack;

public class StackExample {
    public static void main(String[] args) {
        Stack<Integer> stack = new Stack<>();

        // Pushing elements  
 onto the stack
        stack.push(10);
        stack.push(20);
        stack.push(30);

        // Peeking at the top element  

        System.out.println("Top element: " + stack.peek()); // Output: 30

        // Popping elements from the stack
        while (!stack.isEmpty()) {
            System.out.println(stack.pop());
        }
    }
}
يُرجى استخدام الرمز البرمجي بحذر.

Explanation
We create a Stack of integers.
We push three elements (10, 20, 30) onto the stack.
We use peek to see the top element without removing it.
We use a while loop to pop all elements until the stack is empty.
Key Points
The push operation adds an element to the top of the stack.
The pop operation removes and returns the top element.
The peek operation returns the top element without removing it.
The isEmpty operation checks if the stack is empty.
Stacks are often used for backtracking, function calls, and expression evaluation.